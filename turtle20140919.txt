Params
    Numeric RiskRatio(1);                   // % Risk Per N ( 0 - 100)
    Numeric ATRLength(20);                  // ?13????3￠??¨?‘¨??? ATR Length
    Numeric boLength(20);                   // ??-?‘¨??? BreakOut Length
    Numeric fsLength(55);                   // é???‘¨??? FailSafe Length
    Numeric teLength(10);                   // ?|?????‘¨??? Trailing Exit Length
    Bool LastProfitableTradeFilter(True);   // ????”¨?…￥???è????¤??????
	numeric ReEntryLimit(4);
	string FileFolder("C:\\TBLog");
Vars
	Numeric MinPoint;                       // ??€?°??????¨??????
	NumericSeries AvgTR;					// ATR
    Numeric N;                              // N ?€?
    Numeric TotalEquity;                    // ??‰??€?–°?”??????·è????—??o????€?èμ??o§
    Numeric TurtleUnits;                    // ?o¤??“??????
    NumericSeries DonchianHi;              	// ?”??￥???‰é€?é?“???è?¨?????????1??aBar
    NumericSeries DonchianLo;              	// ?”??￥???‰é€?é?“???è?¨?????????1??aBar
    NumericSeries fsDonchianHi;            	// ?”??￥???‰é€?é?“???è?¨?????????1??aBar???é???‘¨???
    NumericSeries fsDonchianLo;            	// ?”??￥???‰é€?é?“???è?¨?????????1??aBar???é???‘¨???
    Numeric ExitHighestPrice;               // ?|?????—???¤?–-é?€è|????N?‘¨?????€é????·
    Numeric ExitLowestPrice;                // ?|?????—???¤?–-é?€è|????N?‘¨?????€?????·
    Numeric myEntryPrice;                   // ??€??“??·? ?
    Numeric myExitPrice;                    // ?13??“??·? ?
    Bool SendOrderThisBar(False);          	// ??“?‰?Bar??‰è???o¤??“
	Numeric PreEntryPrice(0);
	Bool PreBreakoutFailure;
	String LogPath;
	String ParamPath;
	String Temp;
	Numeric i;
	Numeric EntryNumber;
	Bool ExistOpenOrder;
	bool ExistOpenPosition;
	bool DeleteOrderSuccess;
	Numeric MaxSlippage;
Begin
    If(BarStatus == 0)
    {
		PreEntryPrice = InvalidNumeric;
		PreBreakoutFailure = false;
	}	
	
	MinPoint = MinMove*PriceScale;
    AvgTR = XAverage(TrueRange,ATRLength);
	N = AvgTR[1];	
    TotalEquity = A_CurrentEquity();
    TurtleUnits = (TotalEquity*RiskRatio/100) /(N * ContractUnit()*BigPointValue());
    TurtleUnits = IntPart(TurtleUnits); // ?ˉ1?°???°??–??′
	
    DonchianHi = HighestFC(High[1],boLength);
    DonchianLo = LowestFC(Low[1],boLength);

	fsDonchianHi = HighestFC(High[1],fsLength);
    fsDonchianLo = LowestFC(Low[1],fsLength);
	
	ExitLowestPrice = LowestFC(Low[1],teLength);
	ExitHighestPrice = HighestFC(High[1],teLength);
	
	LogPath = FileFolder + "\\TBLog_" + Symbol() + "_" +SymbolName() + "_" + Text(CurrentDate()) + ".csv";
	ParamPath = FileFolder + "\\TurtleSetup.csv";
	
	if(InvalidString == GetTBProfileString2File(ParamPath, Symbol(), "PreEntryPrice"))
	{
		PreEntryPrice = 0;
		SetTBProfileString2File(ParamPath, Symbol(), "PreEntryPrice", text(0));
		SetTBProfileString2File(ParamPath, Symbol(), "PreBreakoutFailure", "False");
		Alert("Reset PreEntryPrice = 0, "+SymbolName());
		Alert("Reset PreBreakoutFailure = False, "+SymbolName());
	}
	else
	{
		PreEntryPrice = Value(GetTBProfileString2File(ParamPath, Symbol(), "PreEntryPrice"));
	}
	
	if(InvalidString == GetTBProfileString2File(ParamPath, Symbol(), "EntryNumber"))
	{
		SetTBProfileString2File(ParamPath, Symbol(), "EntryNumber", text(0));
		Alert("Reset EntryNumber = 0");
	}
	Else
	{
		EntryNumber = Value(GetTBProfileString2File(ParamPath, Symbol(), "EntryNumber"));
	}
	
	if ("True" == GetTBProfileString2File(ParamPath, Symbol(), "PreBreakoutFailure"))
	{
		PreBreakoutFailure = True;
	}
	else if ("False" == GetTBProfileString2File(ParamPath, Symbol(), "PreBreakoutFailure"))
	{
		PreBreakoutFailure = False;
	} 

	if (A_AccountID() <> "") 
	{
		FileAppend(LogPath, 
			"DateTime = " + Text(CurrentDate() + CurrentTime()) +
			", Open = " + Text(Open) +
			", High = " + Text(High) +
			", Low = " + Text(Low) +
			", Close = " + Text(Close) +
			", N = " + Text(N) +
			", MinPoint = " + Text(MinPoint) +
			", ContractUnit = " + Text(ContractUnit()) +
			", BigPointValue = " + Text(BigPointValue()) +
			", TotalEquity = " + Text(TotalEquity) +
			", TurtleUnits = " + Text(TurtleUnits) +
			", DonchianHi = " + Text(DonchianHi) + 
			", DonchianLo = " + Text(DonchianLo) + 
			", fsDonchianHi = " + Text(fsDonchianHi) + 
			", fsDonchianLo = " + Text(fsDonchianLo) + 
			", ExitLowestPrice = " + Text(ExitLowestPrice) + 
			", ExitHighestPrice = " + Text(ExitHighestPrice) + 
			", A_AccountID = " + A_AccountID() +
			", A_TotalPosition = " + Text(A_TotalPosition()) +
			", A_TotalAvgPrice = " + Text(A_TotalAvgPrice()) +
			", A_GetOpenOrderCount = " + Text(A_GetOpenOrderCount()) +
			", PreEntryPrice = " + Text(PreEntryPrice) +
			", PreBreakoutFailure = " + IIFString(PreBreakoutFailure,"True","False") +
			", SendOrderThisBar = " + IIFString(SendOrderThisBar,"True","False"));
	}
	Else
	{
		FileAppend(LogPath, "AccountNotLogin");
	}
	
	if (2147483647 == A_GetOpenOrderCount() or 0 == A_GetOpenOrderCount())
	{
		ExistOpenOrder = False;
	}
	else
	{
		ExistOpenOrder = True;
	}
	
	If (Not CanTrade() )
	{
		FileAppend(LogPath, "CanNotTrade") ;
	}
	Else
	{
		If(A_TotalPosition() == 0 && !ExistOpenOrder && ((!LastProfitableTradeFilter) Or (PreBreakoutFailure)))
		{
			If(High > DonchianHi && TurtleUnits >= 1)
			{
				myEntryPrice = min(high,DonchianHi + MinPoint);
				myEntryPrice = IIF(myEntryPrice < Open, Open,myEntryPrice); 
				PreEntryPrice = myEntryPrice;
				EntryNumber = 1;
				Buy(TurtleUnits, myEntryPrice);
				Alert("BUY "+SymbolName()+" "+Text(TurtleUnits)+" @ "+Text(myEntryPrice)+", EntryTime = "+Text(EntryTime));
				SendOrderThisBar = True;
				PreBreakoutFailure = False;
				FileAppend(LogPath, "ReadyToEntryLong" +
					", myEntryPrice = " + Text(myEntryPrice) +
					", EntryTimes = " + Text(EntryNumber) +
					", SendOrderThisBar = " + IIFString(SendOrderThisBar,"True","False") +
					", PreBreakoutFailure = " + IIFString(PreBreakoutFailure,"True","False"));			
			}
			If(Low < DonchianLo && TurtleUnits >= 1)
			{
				myEntryPrice = max(low,DonchianLo - MinPoint);
				myEntryPrice = IIF(myEntryPrice > Open, Open,myEntryPrice); 
				PreEntryPrice = myEntryPrice;
				SendOrderThisBar = True;
				EntryNumber = 1;
				SellShort(TurtleUnits,myEntryPrice);
				Alert("SELLSHORT "+SymbolName()+" "+Text(TurtleUnits)+" @ "+Text(myEntryPrice)+", EntryTime = "+Text(EntryTime));
				SendOrderThisBar = True;
				PreBreakoutFailure = False;
				FileAppend(LogPath, "ReadyToEntryShort" +
					", myEntryPrice = " + Text(myEntryPrice) +
					", EntryTimes = " + Text(EntryNumber) +
					", SendOrderThisBar = " + IIFString(SendOrderThisBar,"True","False") +
					", PreBreakoutFailure = " + IIFString(PreBreakoutFailure,"True","False"));	
			}
		}
		If(CanTrade() && A_TotalPosition() == 0 && !ExistOpenOrder && !SendOrderThisBar)
		{
			If(High > fsDonchianHi && TurtleUnits >= 1)
			{
				myEntryPrice = min(high, fsDonchianHi + MinPoint);
				myEntryPrice = IIF(myEntryPrice < Open, Open,myEntryPrice); 
				PreEntryPrice = myEntryPrice;
				EntryNumber = 1;
				Buy(TurtleUnits, myEntryPrice);
				Alert("BUY "+SymbolName()+" "+Text(TurtleUnits)+" @ "+Text(myEntryPrice)+", EntryTime = "+Text(EntryTime));
				SendOrderThisBar = True;
				PreBreakoutFailure = False;
				FileAppend(LogPath, "ReadyToEntryLong" + Text(fsLength) +
					", myEntryPrice = " + Text(myEntryPrice) +
					", EntryTimes = " + Text(EntryNumber) +
					", SendOrderThisBar = " + IIFString(SendOrderThisBar,"True","False") +
					", PreBreakoutFailure = " + IIFString(PreBreakoutFailure,"True","False"));	
			}
			If(Low < fsDonchianLo && TurtleUnits >= 1)
			{
				myEntryPrice = max(low,fsDonchianLo - MinPoint);
				myEntryPrice = IIF(myEntryPrice > Open, Open,myEntryPrice); 
				PreEntryPrice = myEntryPrice;
				EntryNumber = 1;
				SellShort(TurtleUnits,myEntryPrice);
				Alert("SELLSHORT "+SymbolName()+" "+Text(TurtleUnits)+" @ "+Text(myEntryPrice)+", EntryTime = "+Text(EntryTime));
				SendOrderThisBar = True;
				PreBreakoutFailure = False;
				FileAppend(LogPath, "ReadyToEntryShort" + Text(fsLength) +
					", myEntryPrice = " + Text(myEntryPrice) +
					", EntryTimes = " + Text(EntryNumber) +
					", SendOrderThisBar = " + IIFString(SendOrderThisBar,"True","False") +
					", PreBreakoutFailure = " + IIFString(PreBreakoutFailure,"True","False"));	
			}
		}
		If(CanTrade() && A_TotalPosition() >0 && !ExistOpenOrder ) 
		{       
			If(Low <= PreEntryPrice - 2 * N && SendOrderThisBar == false) 
			{
				myExitPrice = PreEntryPrice - 2 * N;
				EntryNumber = 0;
				Sell(0, myExitPrice); 
				Alert("SELL "+SymbolName()+" "+Text(TurtleUnits)+" @ "+Text(myEntryPrice)+", EntryTime = "+Text(EntryTime));
				PreBreakoutFailure = True;
				FileAppend(LogPath, "SellToStopLoss" +
					", myExitPrice = " + Text(myExitPrice) +
					", EntryTimes = " + Text(EntryNumber) +
					", SendOrderThisBar = " + IIFString(SendOrderThisBar,"True","False") +
					", PreBreakoutFailure = " + IIFString(PreBreakoutFailure,"True","False"));	
			}
			Else If(Low < ExitLowestPrice)
			{
				myExitPrice = max(Low, ExitLowestPrice - MinPoint);
				myExitPrice = IIF(myExitPrice > Open, Open, myExitPrice);  
				EntryNumber = 0;
				Sell(0, myExitPrice);   
				Alert("SELL "+SymbolName()+" "+Text(TurtleUnits)+" @ "+Text(myEntryPrice)+", EntryTime = "+Text(EntryTime));
				FileAppend(LogPath, "SellToClosePos" +
					", myExitPrice = " + Text(myExitPrice) +
					", EntryTimes = " + Text(EntryNumber) +
					", SendOrderThisBar = " + IIFString(SendOrderThisBar,"True","False") +
					", PreBreakoutFailure = " + IIFString(PreBreakoutFailure,"True","False"));	
			}
			Else
			{
				If(PreEntryPrice != InvalidNumeric && TurtleUnits >= 1)
				{
					If(Open >= PreEntryPrice + 0.5*N And EntryNumber < ReEntryLimit)
					{
						myEntryPrice = Open;
						Buy(TurtleUnits,myEntryPrice); 
						EntryNumber = EntryNumber + 1;
						Alert("BUY "+SymbolName()+" "+Text(TurtleUnits)+" @ "+Text(myEntryPrice)+", EntryTime = "+Text(EntryTime));
						SendOrderThisBar = True;
						FileAppend(LogPath, "BuyToIncreasePosWhenOpen" +
							", myEntryPrice = " + Text(myEntryPrice) +
							", PreEntryPrice = " + Text(PreEntryPrice) +
							", EntryTimes = " + Text(EntryNumber) +
							", SendOrderThisBar = " + IIFString(SendOrderThisBar,"True","False") +
							", PreBreakoutFailure = " + IIFString(PreBreakoutFailure,"True","False"));	
						PreEntryPrice = myEntryPrice;
					}
					while (High >= PreEntryPrice + 0.5*N And EntryNumber < ReEntryLimit) 
					{
						myEntryPrice = PreEntryPrice + 0.5 * N;
						Buy(TurtleUnits,myEntryPrice);
						EntryNumber = EntryNumber + 1;
						Alert("BUY "+SymbolName()+" "+Text(TurtleUnits)+" @ "+Text(myEntryPrice)+", EntryTime = "+Text(EntryTime));
						SendOrderThisBar = True;					
						FileAppend(LogPath, "BuyToIncreasePos" +
							", myEntryPrice = " + Text(myEntryPrice) +
							", PreEntryPrice = " + Text(PreEntryPrice) +
							", EntryTimes = " + Text(EntryNumber) +
							", SendOrderThisBar = " + IIFString(SendOrderThisBar,"True","False") +
							", PreBreakoutFailure = " + IIFString(PreBreakoutFailure,"True","False"));	
						PreEntryPrice = myEntryPrice;
					}
				}
			}
		}
		Else If(CanTrade() && A_TotalPosition() <0 && !ExistOpenOrder ) 
		{     
			If(High >= PreEntryPrice + 2 * N && SendOrderThisBar==false) // ?? ??“Bar????-￠???
			{
				myExitPrice = PreEntryPrice + 2 * N;
				EntryNumber = 0;
				BuyToCover(0, myExitPrice); 
				Alert("BUYTOCOVER "+SymbolName()+" "+Text(TurtleUnits)+" @ "+Text(myEntryPrice)+", EntryTime = "+Text(EntryTime));
				PreBreakoutFailure = True;
				FileAppend(LogPath, "BuyToStopLoss" +
					", myExitPrice = " + Text(myExitPrice) +
					", EntryTimes = " + Text(EntryNumber) +
					", SendOrderThisBar = " + IIFString(SendOrderThisBar,"True","False") +
					", PreBreakoutFailure = " + IIFString(PreBreakoutFailure,"True","False"));	
			}
			Else If(High > ExitHighestPrice)
			{
				myExitPrice = Min(High,ExitHighestPrice + MinPoint);
				myExitPrice = IIF(myExitPrice < Open, Open,myExitPrice); 
				EntryNumber = 0;
				BuyToCover(0,myExitPrice);   
				Alert("BUYTOCOVER "+SymbolName()+" "+Text(TurtleUnits)+" @ "+Text(myEntryPrice)+", EntryTime = "+Text(EntryTime)); 
				FileAppend(LogPath, "BuyToClosePos" +
					", myExitPrice = " + Text(myExitPrice) +
					", EntryTimes = " + Text(EntryNumber) +
					", SendOrderThisBar = " + IIFString(SendOrderThisBar,"True","False") +
					", PreBreakoutFailure = " + IIFString(PreBreakoutFailure,"True","False"));	
			}
			Else
			{
				If(PreEntryPrice!=InvalidNumeric && TurtleUnits >= 1)
				{
					If(Open <= PreEntryPrice - 0.5*N && EntryNumber < ReEntryLimit) // ?|??????€????°±è?…è??è????????1/2N,?????′??￥?”¨??€?????·?￠???“?€?
					{
						myEntryPrice = Open;
						SellShort(TurtleUnits,myEntryPrice);
						EntryNumber = EntryNumber + 1;
						Alert("SELLSHORT "+SymbolName()+" "+Text(TurtleUnits)+" @ "+Text(myEntryPrice)+", EntryTime = "+Text(EntryTime));
						SendOrderThisBar = True;
						FileAppend(LogPath, "SellToIncreasePosWhenOpen" +
							", myEntryPrice = " + Text(myEntryPrice) +
							", PreEntryPrice = " + Text(PreEntryPrice) +
							", EntryTimes = " + Text(EntryNumber) +
							", SendOrderThisBar = " + IIFString(SendOrderThisBar,"True","False") +
							", PreBreakoutFailure = " + IIFString(PreBreakoutFailure,"True","False"));	
						PreEntryPrice = myEntryPrice;
					}
					while(Low <= PreEntryPrice - 0.5*N && EntryNumber < ReEntryLimit) // ??￥??€?????·??o? ?????????¤?–-è??è??è???? ????￠???“
					{
						myEntryPrice = PreEntryPrice - 0.5 * N;
						SellShort(TurtleUnits,myEntryPrice);
						EntryNumber = EntryNumber + 1;
						Alert("SELLSHORT "+SymbolName()+" "+Text(TurtleUnits)+" @ "+Text(myEntryPrice)+", EntryTime = "+Text(EntryTime));
						SendOrderThisBar = True;
						FileAppend(LogPath, "SellToIncreasePos" +
							", myEntryPrice = " + Text(myEntryPrice) +
							", PreEntryPrice = " + Text(PreEntryPrice) +
							", EntryTimes = " + Text(EntryNumber) +
							", SendOrderThisBar = " + IIFString(SendOrderThisBar,"True","False") +
							", PreBreakoutFailure = " + IIFString(PreBreakoutFailure,"True","False"));	
						PreEntryPrice = myEntryPrice;
					}
				}
			}
		}
	}
	If ( ExistOpenOrder )
	{
		for i = 1 to A_GetOpenOrderCount()
		{
			if (Enum_Buy() == A_OpenOrderBuyOrSell(i))
			{
				Temp = "BUY";
			}
			else If(Enum_Sell() == A_OpenOrderBuyOrSell(i))
			{
				Temp = "Sell";
			}
			FileAppend(LogPath, "HasOpenOrder" + text(i) +
				", OrderSide = " + Temp +
				", OpenOrderContractNo = " + A_OpenOrderContractNo(i) +
				", OpenOrderTime = " + Text(A_OpenOrderTime(i)) +
				", OpenOrderLot = " + Text(A_OpenOrderLot(i)) +
				", OpenOrderPrice = " + Text(A_OpenOrderPrice(i)) );
				/* 
			if (Abs(Close - A_OpenOrderPrice(i)) > MaxSlippage)
			{
				DeleteOrderSuccess = A_DeleteOrder(A_OpenOrderContractNo(i));
				FileAppend(LogPath, "DeleteOpenOrder" + text(i) +
					", Result = " + IIFString(DeleteOrderSuccess,"True","False"));	
			}
			 */
		} 
	}
	SetTBProfileString2File(ParamPath, Symbol(), "PreEntryPrice", text(PreEntryPrice));
	SetTBProfileString2File(ParamPath, Symbol(), "PreBreakoutFailure", IIFString(PreBreakoutFailure,"True","False"));
	SetTBProfileString2File(ParamPath, Symbol(), "EntryNumber", text(EntryNumber));
End